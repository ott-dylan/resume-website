{"ast":null,"code":"const toDataView = require('to-data-view');\n\nconst decodeBmp = require('decode-bmp');\n\nfunction isPng(view, offset) {\n  return view.getUint32(offset + 0) === 0x89504e47 && view.getUint32(offset + 4) === 0x0d0a1a0a;\n}\n\nfunction pngBitsPerPixel(view, offset) {\n  const bitDepth = view.getUint8(offset + 24);\n  const colorType = view.getUint8(offset + 25);\n  if (colorType === 0) return bitDepth * 1;\n  if (colorType === 2) return bitDepth * 3;\n  if (colorType === 3) return bitDepth * 1;\n  if (colorType === 4) return bitDepth * 2;\n  if (colorType === 6) return bitDepth * 4;\n  throw new Error('Invalid PNG colorType');\n}\n\nfunction pngWidth(view, offset) {\n  return view.getUint32(offset + 16, false);\n}\n\nfunction pngHeight(view, offset) {\n  return view.getUint32(offset + 20, false);\n}\n\nmodule.exports = function decodeIco(input) {\n  const view = toDataView(input);\n\n  if (view.byteLength < 6) {\n    throw new Error('Truncated header');\n  }\n\n  if (view.getUint16(0, true) !== 0) {\n    throw new Error('Invalid magic bytes');\n  }\n\n  const type = view.getUint16(2, true);\n\n  if (type !== 1 && type !== 2) {\n    throw new Error('Invalid image type');\n  }\n\n  const length = view.getUint16(4, true);\n\n  if (view.byteLength < 6 + 16 * length) {\n    throw new Error('Truncated image list');\n  }\n\n  return Array.from({\n    length\n  }, (_, idx) => {\n    const width = view.getUint8(6 + 16 * idx + 0);\n    const height = view.getUint8(6 + 16 * idx + 1);\n    const size = view.getUint32(6 + 16 * idx + 8, true);\n    const offset = view.getUint32(6 + 16 * idx + 12, true);\n    const hotspot = type !== 2 ? null : {\n      x: view.getUint16(6 + 16 * idx + 4, true),\n      y: view.getUint16(6 + 16 * idx + 6, true)\n    };\n\n    if (isPng(view, offset)) {\n      return {\n        bpp: pngBitsPerPixel(view, offset),\n        data: new Uint8Array(view.buffer, view.byteOffset + offset, size),\n        height: pngHeight(view, offset),\n        hotspot,\n        type: 'png',\n        width: pngWidth(view, offset)\n      };\n    }\n\n    const data = new Uint8Array(view.buffer, view.byteOffset + offset, size);\n    const bmp = decodeBmp(data, {\n      width,\n      height,\n      icon: true\n    });\n    return {\n      bpp: bmp.colorDepth,\n      data: bmp.data,\n      height: bmp.height,\n      hotspot,\n      type: 'bmp',\n      width: bmp.width\n    };\n  });\n};","map":{"version":3,"sources":["/Users/dylanott/Documents/GitHub/dylanott-website/resume-website/node_modules/decode-ico/index.js"],"names":["toDataView","require","decodeBmp","isPng","view","offset","getUint32","pngBitsPerPixel","bitDepth","getUint8","colorType","Error","pngWidth","pngHeight","module","exports","decodeIco","input","byteLength","getUint16","type","length","Array","from","_","idx","width","height","size","hotspot","x","y","bpp","data","Uint8Array","buffer","byteOffset","bmp","icon","colorDepth"],"mappings":"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","sourcesContent":["const toDataView = require('to-data-view')\nconst decodeBmp = require('decode-bmp')\n\nfunction isPng (view, offset) {\n  return (view.getUint32(offset + 0) === 0x89504e47 && view.getUint32(offset + 4) === 0x0d0a1a0a)\n}\n\nfunction pngBitsPerPixel (view, offset) {\n  const bitDepth = view.getUint8(offset + 24)\n  const colorType = view.getUint8(offset + 25)\n\n  if (colorType === 0) return bitDepth * 1\n  if (colorType === 2) return bitDepth * 3\n  if (colorType === 3) return bitDepth * 1\n  if (colorType === 4) return bitDepth * 2\n  if (colorType === 6) return bitDepth * 4\n\n  throw new Error('Invalid PNG colorType')\n}\n\nfunction pngWidth (view, offset) {\n  return view.getUint32(offset + 16, false)\n}\n\nfunction pngHeight (view, offset) {\n  return view.getUint32(offset + 20, false)\n}\n\nmodule.exports = function decodeIco (input) {\n  const view = toDataView(input)\n\n  if (view.byteLength < 6) {\n    throw new Error('Truncated header')\n  }\n\n  if (view.getUint16(0, true) !== 0) {\n    throw new Error('Invalid magic bytes')\n  }\n\n  const type = view.getUint16(2, true)\n\n  if (type !== 1 && type !== 2) {\n    throw new Error('Invalid image type')\n  }\n\n  const length = view.getUint16(4, true)\n\n  if (view.byteLength < 6 + (16 * length)) {\n    throw new Error('Truncated image list')\n  }\n\n  return Array.from({ length }, (_, idx) => {\n    const width = view.getUint8(6 + (16 * idx) + 0)\n    const height = view.getUint8(6 + (16 * idx) + 1)\n    const size = view.getUint32(6 + (16 * idx) + 8, true)\n    const offset = view.getUint32(6 + (16 * idx) + 12, true)\n\n    const hotspot = (type !== 2 ? null : {\n      x: view.getUint16(6 + (16 * idx) + 4, true),\n      y: view.getUint16(6 + (16 * idx) + 6, true)\n    })\n\n    if (isPng(view, offset)) {\n      return {\n        bpp: pngBitsPerPixel(view, offset),\n        data: new Uint8Array(view.buffer, view.byteOffset + offset, size),\n        height: pngHeight(view, offset),\n        hotspot,\n        type: 'png',\n        width: pngWidth(view, offset)\n      }\n    }\n\n    const data = new Uint8Array(view.buffer, view.byteOffset + offset, size)\n    const bmp = decodeBmp(data, { width, height, icon: true })\n\n    return {\n      bpp: bmp.colorDepth,\n      data: bmp.data,\n      height: bmp.height,\n      hotspot,\n      type: 'bmp',\n      width: bmp.width\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}