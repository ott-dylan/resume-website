{"ast":null,"code":"'use strict';\n\nconst decodeIco = require('decode-ico');\n\nconst {\n  MIME_PNG\n} = require('../mime');\n/**\n * @typedef {object} ParsedImage\n * @property {number} width Image width.\n * @property {number} height Image height.\n * @property {number} bpp Image color depth as bits per pixel.\n * @property {ArrayBuffer} buffer Image buffer.\n */\n\n/**\n * Parse ICO and return some image object.\n *\n * @access private\n * @param {ArrayBuffer|Buffer} data - ICO file data.\n * @param {string} mime - MIME type for output.\n * @param {object} Image - Image encoder/decoder.\n * @returns {Promise<ParsedImage[]>} Resolves to an array of {@link ParsedImage}.\n */\n\n\nconst parse = async (data, mime, Image) => {\n  const icons = decodeIco(data);\n\n  const transcodeImage = async icon => {\n    if (mime === MIME_PNG && icon.type === 'png') {\n      return Object.assign({\n        buffer: icon.data.buffer.slice(icon.data.byteOffset, icon.data.byteOffset + icon.data.byteLength)\n      }, icon);\n    }\n\n    if (icon.type === 'png') {\n      const decoded = await Image.decode(icon.data);\n      Object.assign(icon, {\n        data: decoded.data,\n        type: 'bmp'\n      });\n    }\n\n    return Object.assign(icon, {\n      buffer: await Image.encode(icon, mime),\n      type: mime.replace('image/', '')\n    });\n  };\n\n  const parsedImages = await Promise.all(icons.map(transcodeImage));\n  return parsedImages;\n};\n\nmodule.exports = parse;","map":{"version":3,"sources":["/Users/dylanott/Documents/GitHub/dylanott-website/resume-website/node_modules/icojs/src/parse/index.js"],"names":["decodeIco","require","MIME_PNG","parse","data","mime","Image","icons","transcodeImage","icon","type","Object","assign","buffer","slice","byteOffset","byteLength","decoded","decode","encode","replace","parsedImages","Promise","all","map","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,SAAS,GAAGC,OAAO,CAAC,YAAD,CAAzB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAeD,OAAO,CAAC,SAAD,CAA5B;AAEA;;;;;;;;AAQA;;;;;;;;;;;AASA,MAAME,KAAK,GAAG,OAAOC,IAAP,EAAaC,IAAb,EAAmBC,KAAnB,KAA6B;AACzC,QAAMC,KAAK,GAAGP,SAAS,CAACI,IAAD,CAAvB;;AAEA,QAAMI,cAAc,GAAG,MAAMC,IAAN,IAAc;AACnC,QAAIJ,IAAI,KAAKH,QAAT,IAAqBO,IAAI,CAACC,IAAL,KAAc,KAAvC,EAA8C;AAC5C,aAAOC,MAAM,CAACC,MAAP,CAAc;AAAEC,QAAAA,MAAM,EAAEJ,IAAI,CAACL,IAAL,CAAUS,MAAV,CAAiBC,KAAjB,CAAuBL,IAAI,CAACL,IAAL,CAAUW,UAAjC,EAA6CN,IAAI,CAACL,IAAL,CAAUW,UAAV,GAAuBN,IAAI,CAACL,IAAL,CAAUY,UAA9E;AAAV,OAAd,EAAqHP,IAArH,CAAP;AACD;;AAED,QAAIA,IAAI,CAACC,IAAL,KAAc,KAAlB,EAAyB;AACvB,YAAMO,OAAO,GAAG,MAAMX,KAAK,CAACY,MAAN,CAAaT,IAAI,CAACL,IAAlB,CAAtB;AACAO,MAAAA,MAAM,CAACC,MAAP,CAAcH,IAAd,EAAoB;AAClBL,QAAAA,IAAI,EAAEa,OAAO,CAACb,IADI;AAElBM,QAAAA,IAAI,EAAE;AAFY,OAApB;AAID;;AAED,WAAOC,MAAM,CAACC,MAAP,CAAcH,IAAd,EAAoB;AACzBI,MAAAA,MAAM,EAAE,MAAMP,KAAK,CAACa,MAAN,CAAaV,IAAb,EAAmBJ,IAAnB,CADW;AAEzBK,MAAAA,IAAI,EAAEL,IAAI,CAACe,OAAL,CAAa,QAAb,EAAuB,EAAvB;AAFmB,KAApB,CAAP;AAID,GAjBD;;AAmBA,QAAMC,YAAY,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAYhB,KAAK,CAACiB,GAAN,CAAUhB,cAAV,CAAZ,CAA3B;AACA,SAAOa,YAAP;AACD,CAxBD;;AA0BAI,MAAM,CAACC,OAAP,GAAiBvB,KAAjB","sourcesContent":["'use strict';\n\nconst decodeIco = require('decode-ico');\nconst { MIME_PNG } = require('../mime');\n\n/**\n * @typedef {object} ParsedImage\n * @property {number} width Image width.\n * @property {number} height Image height.\n * @property {number} bpp Image color depth as bits per pixel.\n * @property {ArrayBuffer} buffer Image buffer.\n */\n\n/**\n * Parse ICO and return some image object.\n *\n * @access private\n * @param {ArrayBuffer|Buffer} data - ICO file data.\n * @param {string} mime - MIME type for output.\n * @param {object} Image - Image encoder/decoder.\n * @returns {Promise<ParsedImage[]>} Resolves to an array of {@link ParsedImage}.\n */\nconst parse = async (data, mime, Image) => {\n  const icons = decodeIco(data);\n\n  const transcodeImage = async icon => {\n    if (mime === MIME_PNG && icon.type === 'png') {\n      return Object.assign({ buffer: icon.data.buffer.slice(icon.data.byteOffset, icon.data.byteOffset + icon.data.byteLength) }, icon);\n    }\n\n    if (icon.type === 'png') {\n      const decoded = await Image.decode(icon.data);\n      Object.assign(icon, {\n        data: decoded.data,\n        type: 'bmp'\n      });\n    }\n\n    return Object.assign(icon, {\n      buffer: await Image.encode(icon, mime),\n      type: mime.replace('image/', '')\n    });\n  };\n\n  const parsedImages = await Promise.all(icons.map(transcodeImage));\n  return parsedImages;\n};\n\nmodule.exports = parse;\n"]},"metadata":{},"sourceType":"script"}